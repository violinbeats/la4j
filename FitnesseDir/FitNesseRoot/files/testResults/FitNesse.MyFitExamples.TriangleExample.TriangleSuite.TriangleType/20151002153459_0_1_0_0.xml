<?xml version="1.0"?>
<testResults>
  <FitNesseVersion>v20150114</FitNesseVersion>
  <rootPath>FitNesse.MyFitExamples.TriangleExample.TriangleSuite.TriangleType</rootPath>
    <result>
    <counts>
      <right>32</right>
      <wrong>2</wrong>
      <ignores>244</ignores>
      <exceptions>0</exceptions>
    </counts>
    <runTimeInMillis>105</runTimeInMillis>
    <content>&lt;br/&gt;&lt;h1&gt;Triangle Input Space Model and Test Cases&lt;/h1&gt;
&lt;br/&gt;&lt;div class="collapsible"&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='#' class='expandall'&gt;Expand&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='#' class='collapseall'&gt;Collapse&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
	&lt;p class="title"&gt;Included page: &lt;a href="FitNesse.MyFitExamples.TriangleExample.TriangleHeader"&gt;.FitNesse.MyFitExamples.TriangleExample.TriangleHeader&lt;/a&gt; &lt;a href="FitNesse.MyFitExamples.TriangleExample.TriangleHeader?edit&amp;amp;redirectToReferer=true&amp;amp;redirectAction=" class="edit"&gt;(edit)&lt;/a&gt;&lt;/p&gt;
	&lt;div&gt;Warning: Make sure rerun cobertura instrumentation after updating java sources, disable cobertura classpath definitions, or remove instrumented classes (in ../target/generated-classes). You may have to do a "mvn clean" followed by "Project -&amp;gt; Clean". Otherwise Fitnesse will find old instrumented classes in the classpath rather than the newly compiled classes because of the given ordering of classpath definitions in the header file. &lt;br/&gt;&lt;br/&gt;&lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt;Import&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;fitnesse.fixtures&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;span class="meta"&gt;classpath: ../target/generated-classes/cobertura&lt;/span&gt;&lt;br/&gt;&lt;span class="meta"&gt;classpath: cobertura-2.0.3/cobertura-2.0.3.jar&lt;/span&gt;&lt;br/&gt;&lt;span class="meta"&gt;classpath: FitnesseDir/cobertura-2.0.3/cobertura-2.0.3.jar&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;table&gt;
	&lt;tr&gt;
		&lt;td colspan="2"&gt;System property setter fixture&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;key&lt;/td&gt;
		&lt;td&gt;value&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;net.sourceforge.cobertura.datafile&lt;/td&gt;
		&lt;td&gt;/Users/Vincent/Documents/CMU/SVVT/L2/FitNesseLab-master/target/cobertura/cobertura.ser&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;span class="meta"&gt;classpath: ../target/generated-classes/cobertura&lt;/span&gt;&lt;br/&gt;&lt;span class="meta"&gt;classpath: target/generated-classes/cobertura&lt;/span&gt;&lt;br/&gt;&lt;span class="meta"&gt;classpath: ../target/classes&lt;/span&gt;&lt;br/&gt;&lt;span class="meta"&gt;classpath: target/classes&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;br/&gt;&lt;h2&gt;Attributes and Characteristics&lt;/h2&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr&gt;
		&lt;td colspan="3"&gt;Comment&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td colspan="3" class="ignore"&gt;Attributes - each attribute represents length of a side as an integer&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;a&lt;/td&gt;
		&lt;td class="ignore"&gt;b&lt;/td&gt;
		&lt;td class="ignore"&gt;c&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr&gt;
		&lt;td colspan="7"&gt;Comment&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td colspan="7" class="ignore"&gt;Characteristics and Partitions&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;Characteristic&lt;/td&gt;
		&lt;td class="ignore"&gt;Definition&lt;/td&gt;
		&lt;td class="ignore"&gt;Partition&lt;/td&gt;
		&lt;td colspan="4" class="ignore"&gt;Notes / Constraints&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;DomainOf_a&lt;/td&gt;
		&lt;td class="ignore"&gt;Relation of a to 1&lt;/td&gt;
		&lt;td class="ignore"&gt;a&amp;lt;1, a=1, a&amp;gt;1&lt;/td&gt;
		&lt;td colspan="4" class="ignore"&gt;lower robust boundary value&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;DomainOf_b&lt;/td&gt;
		&lt;td class="ignore"&gt;Relation of b to 1&lt;/td&gt;
		&lt;td class="ignore"&gt;b&amp;lt;1, b=1, b&amp;gt;1&lt;/td&gt;
		&lt;td colspan="4" class="ignore"&gt;lower robust boundary value&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;DomainOf_c&lt;/td&gt;
		&lt;td class="ignore"&gt;Relation of b to 1&lt;/td&gt;
		&lt;td class="ignore"&gt;b&amp;lt;1, b=1, b&amp;gt;1&lt;/td&gt;
		&lt;td colspan="4" class="ignore"&gt;lower robust boundary value&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;Valid&lt;/td&gt;
		&lt;td class="ignore"&gt;Validity of triangle&lt;/td&gt;
		&lt;td class="ignore"&gt;T, F&lt;/td&gt;
		&lt;td colspan="4" class="ignore"&gt;T if a,b,c&amp;gt;=1 &amp;amp; a+b&amp;gt;c &amp;amp; b+c&amp;gt;a &amp;amp; a+c&amp;gt;b; F otherwise&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;Classification&lt;/td&gt;
		&lt;td class="ignore"&gt;One of three triangle types&lt;/td&gt;
		&lt;td class="ignore"&gt;EQUILATERAL, SCALENE, ISOSCELES&lt;/td&gt;
		&lt;td class="ignore"&gt;if Valid&lt;/td&gt;
		&lt;td class="ignore"&gt;EQUILATERAL: a=b=c&lt;/td&gt;
		&lt;td class="ignore"&gt;SCALENE: a!=b, b!=c, c!=a&lt;/td&gt;
		&lt;td class="ignore"&gt;ISOSCELES: a=b or b=c or c=a, but not a=b=c&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;RightAngled&lt;/td&gt;
		&lt;td class="ignore"&gt;Whether triangle has a right angle&lt;/td&gt;
		&lt;td class="ignore"&gt;T, F&lt;/td&gt;
		&lt;td class="ignore"&gt;if Valid&lt;/td&gt;
		&lt;td class="ignore"&gt;EQUILATERAL cannot be right angled&lt;/td&gt;
		&lt;td colspan="2" class="ignore"&gt;RightAngled: a*a=b*b+c*c or b*b=a*a+b*b or c*c=a*a+b*b&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;br/&gt;&lt;h2&gt;Test Design Strategy&lt;/h2&gt;
&lt;br/&gt;1. Apply Base-Choice for DomainOf_a, DomainOf_b, DomainOf_c.&lt;br/&gt;2. Assume a,b,c&amp;gt;=1. Combine result with remaining conditions of Valid using All-Combinations of these conditions.&lt;br/&gt;3. For only Valid: consider All (feasible) Combinations of Classification and RightAngled.&lt;br/&gt;4. For ISOSCELES and SCALENE: add to 3 all disjunctive conditions. &lt;br/&gt;&lt;br/&gt;&lt;h3&gt;Step 1&lt;/h3&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr&gt;
		&lt;td colspan="6"&gt;Comment&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td colspan="6" class="ignore"&gt;Base-Choice combinations for DomainOf_a, DomainOf_b, DomainOf_c&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td colspan="6" class="ignore"&gt;Base Case = (1, 1, 1)&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;Case&lt;/td&gt;
		&lt;td class="ignore"&gt;DomainOf_a&lt;/td&gt;
		&lt;td class="ignore"&gt;DomainOf_b&lt;/td&gt;
		&lt;td class="ignore"&gt;DomainOf_c&lt;/td&gt;
		&lt;td class="ignore"&gt;Valid&lt;/td&gt;
		&lt;td class="ignore"&gt;Variation&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;B1&lt;/td&gt;
		&lt;td class="ignore"&gt;a=1&lt;/td&gt;
		&lt;td class="ignore"&gt;b=1&lt;/td&gt;
		&lt;td class="ignore"&gt;c=1&lt;/td&gt;
		&lt;td class="ignore"&gt;T&lt;/td&gt;
		&lt;td class="ignore"&gt;Base Case&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;B2&lt;/td&gt;
		&lt;td class="ignore"&gt;a=1&lt;/td&gt;
		&lt;td class="ignore"&gt;b=1&lt;/td&gt;
		&lt;td class="ignore"&gt;c&amp;gt;1&lt;/td&gt;
		&lt;td class="ignore"&gt;T&lt;/td&gt;
		&lt;td class="ignore"&gt;c&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;B3&lt;/td&gt;
		&lt;td class="ignore"&gt;a=1&lt;/td&gt;
		&lt;td class="ignore"&gt;b=1&lt;/td&gt;
		&lt;td class="ignore"&gt;c&amp;lt;1&lt;/td&gt;
		&lt;td class="ignore"&gt;F&lt;/td&gt;
		&lt;td class="ignore"&gt;c&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;B4&lt;/td&gt;
		&lt;td class="ignore"&gt;a=1&lt;/td&gt;
		&lt;td class="ignore"&gt;b&amp;gt;1&lt;/td&gt;
		&lt;td class="ignore"&gt;c=1&lt;/td&gt;
		&lt;td class="ignore"&gt;T&lt;/td&gt;
		&lt;td class="ignore"&gt;b&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;B5&lt;/td&gt;
		&lt;td class="ignore"&gt;a=1&lt;/td&gt;
		&lt;td class="ignore"&gt;b&amp;lt;1&lt;/td&gt;
		&lt;td class="ignore"&gt;c=1&lt;/td&gt;
		&lt;td class="ignore"&gt;F&lt;/td&gt;
		&lt;td class="ignore"&gt;b&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;B6&lt;/td&gt;
		&lt;td class="ignore"&gt;a&amp;gt;1&lt;/td&gt;
		&lt;td class="ignore"&gt;b=1&lt;/td&gt;
		&lt;td class="ignore"&gt;c=1&lt;/td&gt;
		&lt;td class="ignore"&gt;T&lt;/td&gt;
		&lt;td class="ignore"&gt;a&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;B7&lt;/td&gt;
		&lt;td class="ignore"&gt;a&amp;lt;1&lt;/td&gt;
		&lt;td class="ignore"&gt;b=1&lt;/td&gt;
		&lt;td class="ignore"&gt;c=1&lt;/td&gt;
		&lt;td class="ignore"&gt;F&lt;/td&gt;
		&lt;td class="ignore"&gt;a&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td colspan="6" class="ignore"&gt;7 Test Cases&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;h3&gt;Step 2&lt;/h3&gt;
 &lt;br/&gt;&lt;table&gt;
	&lt;tr&gt;
		&lt;td colspan="7"&gt;Comment&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td colspan="7" class="ignore"&gt;Decision Table for Valid&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;Stub&lt;/td&gt;
		&lt;td class="ignore"&gt;R1&lt;/td&gt;
		&lt;td class="ignore"&gt;R2&lt;/td&gt;
		&lt;td class="ignore"&gt;R3&lt;/td&gt;
		&lt;td class="ignore"&gt;R4&lt;/td&gt;
		&lt;td class="ignore"&gt;R5&lt;/td&gt;
		&lt;td class="ignore"&gt;Coverage&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;c.a,b,c&amp;gt;=1?&lt;/td&gt;
		&lt;td class="ignore"&gt;F&lt;/td&gt;
		&lt;td class="ignore"&gt;T&lt;/td&gt;
		&lt;td class="ignore"&gt;T&lt;/td&gt;
		&lt;td class="ignore"&gt;T&lt;/td&gt;
		&lt;td class="ignore"&gt;T&lt;/td&gt;
		&lt;td class="ignore"&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;c.a+b&amp;gt;c?&lt;/td&gt;
		&lt;td class="ignore"&gt;-&lt;/td&gt;
		&lt;td class="ignore"&gt;T&lt;/td&gt;
		&lt;td class="ignore"&gt;F&lt;/td&gt;
		&lt;td class="ignore"&gt;T&lt;/td&gt;
		&lt;td class="ignore"&gt;T&lt;/td&gt;
		&lt;td class="ignore"&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;c.a+c&amp;gt;b?&lt;/td&gt;
		&lt;td class="ignore"&gt;-&lt;/td&gt;
		&lt;td class="ignore"&gt;T&lt;/td&gt;
		&lt;td class="ignore"&gt;-&lt;/td&gt;
		&lt;td class="ignore"&gt;F&lt;/td&gt;
		&lt;td class="ignore"&gt;T&lt;/td&gt;
		&lt;td class="ignore"&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;c.b+c&amp;gt;a?&lt;/td&gt;
		&lt;td class="ignore"&gt;-&lt;/td&gt;
		&lt;td class="ignore"&gt;T&lt;/td&gt;
		&lt;td class="ignore"&gt;-&lt;/td&gt;
		&lt;td class="ignore"&gt;-&lt;/td&gt;
		&lt;td class="ignore"&gt;F&lt;/td&gt;
		&lt;td class="ignore"&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;a.Valid&lt;/td&gt;
		&lt;td class="ignore"&gt;&lt;/td&gt;
		&lt;td class="ignore"&gt;X&lt;/td&gt;
		&lt;td class="ignore"&gt;&lt;/td&gt;
		&lt;td class="ignore"&gt;&lt;/td&gt;
		&lt;td class="ignore"&gt;&lt;/td&gt;
		&lt;td class="ignore"&gt;Ok&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;a.Invalid&lt;/td&gt;
		&lt;td class="ignore"&gt;X&lt;/td&gt;
		&lt;td class="ignore"&gt;&lt;/td&gt;
		&lt;td class="ignore"&gt;X&lt;/td&gt;
		&lt;td class="ignore"&gt;X&lt;/td&gt;
		&lt;td class="ignore"&gt;X&lt;/td&gt;
		&lt;td class="ignore"&gt;Ok&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;a.Impossible&lt;/td&gt;
		&lt;td class="ignore"&gt;&lt;/td&gt;
		&lt;td class="ignore"&gt;&lt;/td&gt;
		&lt;td class="ignore"&gt;&lt;/td&gt;
		&lt;td class="ignore"&gt;&lt;/td&gt;
		&lt;td class="ignore"&gt;&lt;/td&gt;
		&lt;td class="ignore"&gt;N/A&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;Rule Count&lt;/td&gt;
		&lt;td class="ignore"&gt;8&lt;/td&gt;
		&lt;td class="ignore"&gt;1&lt;/td&gt;
		&lt;td class="ignore"&gt;4&lt;/td&gt;
		&lt;td class="ignore"&gt;2&lt;/td&gt;
		&lt;td class="ignore"&gt;1&lt;/td&gt;
		&lt;td class="ignore"&gt;16 = 2^4&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td colspan="7" class="ignore"&gt;3 Test Cases for R3-R5 (R1,R2 covered by B1-B7)&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;h3&gt;Steps 3-4&lt;/h3&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr&gt;
		&lt;td colspan="4"&gt;Comment&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td colspan="4" class="ignore"&gt;All feasible combinations of Classification and RightAngled for Valid&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;Case&lt;/td&gt;
		&lt;td class="ignore"&gt;Classification&lt;/td&gt;
		&lt;td class="ignore"&gt;RightAngled&lt;/td&gt;
		&lt;td class="ignore"&gt;Impossible&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;C1&lt;/td&gt;
		&lt;td class="ignore"&gt;EQUILATERAL&lt;/td&gt;
		&lt;td class="ignore"&gt;T&lt;/td&gt;
		&lt;td class="ignore"&gt;X&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;C2&lt;/td&gt;
		&lt;td class="ignore"&gt;EQUILATERAL&lt;/td&gt;
		&lt;td class="ignore"&gt;F&lt;/td&gt;
		&lt;td class="ignore"&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;C3&lt;/td&gt;
		&lt;td class="ignore"&gt;ISOSCELES (a=b)&lt;/td&gt;
		&lt;td class="ignore"&gt;T&lt;/td&gt;
		&lt;td class="ignore"&gt;X&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;C4&lt;/td&gt;
		&lt;td class="ignore"&gt;ISOSCELES (a=b&lt;/td&gt;
		&lt;td class="ignore"&gt;F&lt;/td&gt;
		&lt;td class="ignore"&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;C5&lt;/td&gt;
		&lt;td class="ignore"&gt;ISOSCELES (b=c)&lt;/td&gt;
		&lt;td class="ignore"&gt;T&lt;/td&gt;
		&lt;td class="ignore"&gt;X&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;C6&lt;/td&gt;
		&lt;td class="ignore"&gt;ISOSCELES (b=c)&lt;/td&gt;
		&lt;td class="ignore"&gt;F&lt;/td&gt;
		&lt;td class="ignore"&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;C7&lt;/td&gt;
		&lt;td class="ignore"&gt;ISOSCELES (a=c)&lt;/td&gt;
		&lt;td class="ignore"&gt;T&lt;/td&gt;
		&lt;td class="ignore"&gt;X&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;C8&lt;/td&gt;
		&lt;td class="ignore"&gt;ISOSCELES (a=c)&lt;/td&gt;
		&lt;td class="ignore"&gt;F&lt;/td&gt;
		&lt;td class="ignore"&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;C9&lt;/td&gt;
		&lt;td class="ignore"&gt;SCALENE (a*a=b*b+c*c)&lt;/td&gt;
		&lt;td class="ignore"&gt;T&lt;/td&gt;
		&lt;td class="ignore"&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;C10&lt;/td&gt;
		&lt;td class="ignore"&gt;SCALENE (b*b=a*a+c*c)&lt;/td&gt;
		&lt;td class="ignore"&gt;T&lt;/td&gt;
		&lt;td class="ignore"&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;C11&lt;/td&gt;
		&lt;td class="ignore"&gt;SCALENE (c*c=b*b+a*a)&lt;/td&gt;
		&lt;td class="ignore"&gt;T&lt;/td&gt;
		&lt;td class="ignore"&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;C12&lt;/td&gt;
		&lt;td class="ignore"&gt;SCALENE&lt;/td&gt;
		&lt;td class="ignore"&gt;F&lt;/td&gt;
		&lt;td class="ignore"&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td colspan="4" class="ignore"&gt;7 Test Cases (4 impossible, C2 is covered by B1)&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;h2&gt;Test Cases for Triangle&lt;/h2&gt;
&lt;br/&gt;&lt;br/&gt;&lt;table&gt;
	&lt;tr&gt;
		&lt;td colspan="7"&gt;fit.triangle.TriangleType&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;&lt;/td&gt;
		&lt;td&gt;&lt;/td&gt;
		&lt;td&gt;a&lt;/td&gt;
		&lt;td&gt;b&lt;/td&gt;
		&lt;td&gt;c&lt;/td&gt;
		&lt;td&gt;classification?&lt;/td&gt;
		&lt;td&gt;isRightAngled?&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;Case&lt;/td&gt;
		&lt;td class="ignore"&gt;Source&lt;/td&gt;
		&lt;td colspan="5"&gt; &lt;span class="fit_grey"&gt;0&lt;/span&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;1&lt;/td&gt;
		&lt;td class="ignore"&gt;B1&lt;/td&gt;
		&lt;td&gt;1&lt;/td&gt;
		&lt;td&gt;1&lt;/td&gt;
		&lt;td&gt;1&lt;/td&gt;
		&lt;td class="pass"&gt;EQUILATERAL&lt;/td&gt;
		&lt;td class="pass"&gt;false&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;2&lt;/td&gt;
		&lt;td class="ignore"&gt;B2&lt;/td&gt;
		&lt;td&gt;1&lt;/td&gt;
		&lt;td&gt;1&lt;/td&gt;
		&lt;td&gt;2&lt;/td&gt;
		&lt;td class="pass"&gt;error&lt;/td&gt;
		&lt;td class="pass"&gt;error&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;3&lt;/td&gt;
		&lt;td class="ignore"&gt;B3&lt;/td&gt;
		&lt;td&gt;1&lt;/td&gt;
		&lt;td&gt;1&lt;/td&gt;
		&lt;td&gt;0&lt;/td&gt;
		&lt;td class="pass"&gt;error&lt;/td&gt;
		&lt;td class="pass"&gt;error&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;4&lt;/td&gt;
		&lt;td class="ignore"&gt;B4&lt;/td&gt;
		&lt;td&gt;1&lt;/td&gt;
		&lt;td&gt;2&lt;/td&gt;
		&lt;td&gt;1&lt;/td&gt;
		&lt;td class="pass"&gt;error&lt;/td&gt;
		&lt;td class="pass"&gt;error&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;5&lt;/td&gt;
		&lt;td class="ignore"&gt;B5&lt;/td&gt;
		&lt;td&gt;1&lt;/td&gt;
		&lt;td&gt;0&lt;/td&gt;
		&lt;td&gt;1&lt;/td&gt;
		&lt;td class="pass"&gt;error&lt;/td&gt;
		&lt;td class="pass"&gt;error&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;6&lt;/td&gt;
		&lt;td class="ignore"&gt;B6&lt;/td&gt;
		&lt;td&gt;2&lt;/td&gt;
		&lt;td&gt;1&lt;/td&gt;
		&lt;td&gt;1&lt;/td&gt;
		&lt;td class="pass"&gt;error&lt;/td&gt;
		&lt;td class="pass"&gt;error&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;7&lt;/td&gt;
		&lt;td class="ignore"&gt;B7&lt;/td&gt;
		&lt;td&gt;0&lt;/td&gt;
		&lt;td&gt;1&lt;/td&gt;
		&lt;td&gt;1&lt;/td&gt;
		&lt;td class="pass"&gt;error&lt;/td&gt;
		&lt;td class="pass"&gt;error&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;8&lt;/td&gt;
		&lt;td class="ignore"&gt;R3&lt;/td&gt;
		&lt;td&gt;1&lt;/td&gt;
		&lt;td&gt;2&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td class="pass"&gt;error&lt;/td&gt;
		&lt;td class="pass"&gt;error&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;9&lt;/td&gt;
		&lt;td class="ignore"&gt;R4&lt;/td&gt;
		&lt;td&gt;1&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;2&lt;/td&gt;
		&lt;td class="pass"&gt;error&lt;/td&gt;
		&lt;td class="pass"&gt;error&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;10&lt;/td&gt;
		&lt;td class="ignore"&gt;R5&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;1&lt;/td&gt;
		&lt;td&gt;2&lt;/td&gt;
		&lt;td class="pass"&gt;error&lt;/td&gt;
		&lt;td class="pass"&gt;error&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;11&lt;/td&gt;
		&lt;td class="ignore"&gt;C4&lt;/td&gt;
		&lt;td&gt;2&lt;/td&gt;
		&lt;td&gt;2&lt;/td&gt;
		&lt;td&gt;3&lt;/td&gt;
		&lt;td class="pass"&gt;ISOSCELES&lt;/td&gt;
		&lt;td class="pass"&gt;false&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;12&lt;/td&gt;
		&lt;td class="ignore"&gt;C6&lt;/td&gt;
		&lt;td&gt;3&lt;/td&gt;
		&lt;td&gt;2&lt;/td&gt;
		&lt;td&gt;2&lt;/td&gt;
		&lt;td class="fail"&gt;ISOSCELES &lt;span class="fit_label"&gt;expected&lt;/span&gt;&lt;hr&gt;SCALENE &lt;span class="fit_label"&gt;actual&lt;/span&gt;&lt;/td&gt;
		&lt;td class="pass"&gt;false&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;13&lt;/td&gt;
		&lt;td class="ignore"&gt;C8&lt;/td&gt;
		&lt;td&gt;2&lt;/td&gt;
		&lt;td&gt;3&lt;/td&gt;
		&lt;td&gt;2&lt;/td&gt;
		&lt;td class="fail"&gt;ISOSCELES &lt;span class="fit_label"&gt;expected&lt;/span&gt;&lt;hr&gt;SCALENE &lt;span class="fit_label"&gt;actual&lt;/span&gt;&lt;/td&gt;
		&lt;td class="pass"&gt;false&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;14&lt;/td&gt;
		&lt;td class="ignore"&gt;C9&lt;/td&gt;
		&lt;td&gt;5&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;3&lt;/td&gt;
		&lt;td class="pass"&gt;SCALENE&lt;/td&gt;
		&lt;td class="pass"&gt;true&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;15&lt;/td&gt;
		&lt;td class="ignore"&gt;C10&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;5&lt;/td&gt;
		&lt;td&gt;3&lt;/td&gt;
		&lt;td class="pass"&gt;SCALENE&lt;/td&gt;
		&lt;td class="pass"&gt;true&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;16&lt;/td&gt;
		&lt;td class="ignore"&gt;C11&lt;/td&gt;
		&lt;td&gt;3&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td&gt;5&lt;/td&gt;
		&lt;td class="pass"&gt;SCALENE&lt;/td&gt;
		&lt;td class="pass"&gt;true&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class="ignore"&gt;17&lt;/td&gt;
		&lt;td class="ignore"&gt;C12&lt;/td&gt;
		&lt;td&gt;2&lt;/td&gt;
		&lt;td&gt;3&lt;/td&gt;
		&lt;td&gt;4&lt;/td&gt;
		&lt;td class="pass"&gt;SCALENE&lt;/td&gt;
		&lt;td class="pass"&gt;false&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;h2&gt;Results&lt;/h2&gt;
&lt;br/&gt;Two failures in this case were caught by systematic testing, but not ad-hoc unit testing. The classify() method forgot to consider the cases where b=c or c=a for isosceles triangles.&lt;br/&gt;&lt;br/&gt;The test suite is not catching the fault in valid() int the compound condition (a &amp;lt;= 0  ||  b &amp;lt;= 0  ||  b &amp;lt;= 0) ["b &amp;lt;= 0" should be "c &amp;lt;= 0"] &lt;br/&gt;because case B3 values are chosen such &lt;br/&gt;that the triangle is still invalid due to subsequent Valid conditions.  &lt;br/&gt;&lt;br/&gt;In fact, the compound condition in the code is not necessary since it's subsumed by the subsequent conditions in Valid. &lt;br/&gt;We can easily show (a &amp;lt; b + c  &amp;amp;&amp;amp;  b &amp;lt; a + c  &amp;amp;&amp;amp;  c &amp;lt; b + a) implies (a &amp;gt; 0  &amp;amp;&amp;amp;  b &amp;gt; 0  &amp;amp;&amp;amp;  c &amp;gt; 0). &lt;br/&gt;Thus we can't find triples (a, b, c) such that both (a &amp;lt;= 0 || b &amp;lt;= 0 || b &amp;lt;= 0) and (a &amp;lt; b + c  &amp;amp;&amp;amp;  b &amp;lt; a + c  &amp;amp;&amp;amp;  c &amp;lt; b + a). &lt;br/&gt;&lt;br/&gt;</content>
    <relativePageName>TriangleType</relativePageName>
          </result>
      <finalCounts>
    <right>0</right>
    <wrong>1</wrong>
    <ignores>0</ignores>
    <exceptions>0</exceptions>
  </finalCounts>
  <totalRunTimeInMillis>105</totalRunTimeInMillis>
  
</testResults>

